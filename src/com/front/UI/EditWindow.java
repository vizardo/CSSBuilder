/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.front.UI;

import com.Utility.InputValidator;
import com.Utility.PropertyLoader;
import com.Utility.StyleRule;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.JTextField;

/**
 *
 * @author Vishnuprasad
 */
public class EditWindow extends javax.swing.JFrame {

    /**
     * Creates new form EditWindow
     */
    public EditWindow() {
        initComponents();
        
          Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);

/*
 * Making window appear in the center of the screen.
 * solution implemented as found in-
 * http://stackoverflow.com/questions/2442599/how-to-set-jframe-to-appear-centered-regardless-of-the-monitor-resolution
 *  given by user Jack:
 * http://stackoverflow.com/users/121747/jack
 * 
 * 
 */
        
        properties = new PropertyLoader();
        try {
            properties.loadProperties();
        } catch (IOException ex) {
            System.out.println("ERROR: Encountered error while loading CSS properties. Program terminated!");
            Logger.getLogger(EditWindow.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(1);
        }
        colorChooser=new JColorChooser();
        colorChooser.setVisible(false);
        this.getContentPane().setBackground(new java.awt.Color(158,252,151));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        propertiesCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        valuesCombo = new javax.swing.JComboBox();
        manualEntryTxtBox = new javax.swing.JTextField();
        plus100 = new javax.swing.JButton();
        plus10 = new javax.swing.JButton();
        plus1 = new javax.swing.JButton();
        fineTuneSlider = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stylesAddedTxtArea = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        valueList = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        categoriesCombo = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        pxChkBox = new javax.swing.JCheckBox();
        emChkBox = new javax.swing.JCheckBox();
        percentChkbox = new javax.swing.JCheckBox();
        plus2 = new javax.swing.JButton();
        clearStyleBtn = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Properties");

        propertiesCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        propertiesCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                propertiesComboItemStateChanged(evt);
            }
        });
        propertiesCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertiesComboActionPerformed(evt);
            }
        });

        jLabel2.setText("Values");

        valuesCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        valuesCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                valuesComboItemStateChanged(evt);
            }
        });
        valuesCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valuesComboActionPerformed(evt);
            }
        });

        manualEntryTxtBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualEntryTxtBoxActionPerformed(evt);
            }
        });

        plus100.setText("+100");
        plus100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plus100ActionPerformed(evt);
            }
        });

        plus10.setText("+10");
        plus10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plus10ActionPerformed(evt);
            }
        });

        plus1.setText("+1");
        plus1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plus1ActionPerformed(evt);
            }
        });

        fineTuneSlider.setMajorTickSpacing(10);
        fineTuneSlider.setMaximum(99);
        fineTuneSlider.setMinorTickSpacing(1);
        fineTuneSlider.setPaintLabels(true);
        fineTuneSlider.setPaintTicks(true);
        fineTuneSlider.setSnapToTicks(true);
        fineTuneSlider.setValue(0);
        fineTuneSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fineTuneSliderStateChanged(evt);
            }
        });

        jLabel3.setText("Numeric & Manual Entry");

        jLabel4.setText("Units");

        stylesAddedTxtArea.setEditable(false);
        stylesAddedTxtArea.setColumns(20);
        stylesAddedTxtArea.setRows(5);
        jScrollPane2.setViewportView(stylesAddedTxtArea);

        jButton4.setText("ADD PROPERTY");
        jButton4.setToolTipText("Concatenates what ever value is in the 'Numeric & Manual Entry' text box with values in 'Value List' Text box.");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel5.setText("Styles Added");

        jButton5.setText("FINISH");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel6.setText("Set Decimal Value");

        jButton1.setText("ADD VALUE");
        jButton1.setToolTipText("For properties that can take multiple properties; for example, border: 1px solid gray. Use only for properties that takes more than one value");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Select Property Type");

        categoriesCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        categoriesCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categoriesComboItemStateChanged(evt);
            }
        });
        categoriesCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriesComboActionPerformed(evt);
            }
        });

        jLabel8.setText("Value List");

        jButton2.setText("PICK COLOR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        pxChkBox.setText("px");
        pxChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pxChkBoxActionPerformed(evt);
            }
        });

        emChkBox.setText("em");
        emChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emChkBoxActionPerformed(evt);
            }
        });

        percentChkbox.setText("%");
        percentChkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentChkboxActionPerformed(evt);
            }
        });

        plus2.setText("CLEAR");
        plus2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plus2ActionPerformed(evt);
            }
        });

        clearStyleBtn.setBackground(new java.awt.Color(255, 0, 51));
        clearStyleBtn.setText("CLEAR STYLE");
        clearStyleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearStyleBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(clearStyleBtn)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(valuesCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(categoriesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(propertiesCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addComponent(manualEntryTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(percentChkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(pxChkBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emChkBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fineTuneSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(plus100)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(plus10, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(plus1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(plus2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(valueList, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoriesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(propertiesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valuesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manualEntryTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(plus1)
                            .addComponent(plus10)
                            .addComponent(plus100)
                            .addComponent(plus2))
                        .addGap(19, 19, 19)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel4)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pxChkBox)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(fineTuneSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(emChkBox)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel8)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(percentChkbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clearStyleBtn)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void manualEntryTxtBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualEntryTxtBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_manualEntryTxtBoxActionPerformed

    private void plus1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plus1ActionPerformed

        String val = manualEntryTxtBox.getText();
        Double enteredValue;
        if (!(val.equals("")) && val.trim().length() != 0 && val.matches("^\\d+\\.*\\d*$")) {
            enteredValue = Double.parseDouble(val);
        } else {
            String startingVal=new InputValidator().editWindowNumericValueValidator(val);
            if(!(startingVal.equals("")) && startingVal.trim().length() != 0)
            enteredValue = Double.parseDouble(startingVal);
            else
                enteredValue =new Double(0);
        }
        enteredValue += 1;
        manualEntryTxtBox.setText(enteredValue.toString());
    }//GEN-LAST:event_plus1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        System.out.println("Styles: "+stylesAddedTxtArea.getText());
        System.out.println("Rules: "+rule.toString());
        CreateWindow.setAllStylesTxtArea("\n"+rule.toString());
        CreateWindow.addRuleListElement(rule);
        this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        
        loadCategoriesCombo();

    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:       
    }//GEN-LAST:event_formWindowClosed

    private void fineTuneSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fineTuneSliderStateChanged
        String inputString = new InputValidator().editWindowNumericValueValidator(manualEntryTxtBox.getText());
        DecimalFormat formatter = new DecimalFormat("##0.0#");

        Double value, enteredValue;

        if (!(inputString.equals("")) && inputString.trim().length() != 0) {
            try {
                enteredValue = Double.parseDouble(inputString);
            } catch (Exception e) {
                manualEntryTxtBox.setText("0");
                enteredValue = new Double(0);
            }
        } else {
            manualEntryTxtBox.setText("0");
            enteredValue = new Double(0);
        }

        //int intValue=enteredValue.intValue();

        if (!fineTuneSlider.getValueIsAdjusting()) {

            value = (fineTuneSlider.getValue() / 100.0);
            System.out.println(value + ", " + enteredValue);
            manualEntryTxtBox.setText((value + enteredValue.intValue()) + "");
        }


    }//GEN-LAST:event_fineTuneSliderStateChanged

    private void plus100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plus100ActionPerformed
        String val = manualEntryTxtBox.getText();
        Double enteredValue;
         if (!(val.equals("")) && val.trim().length() != 0 && val.matches("^\\d+\\.*\\d*$")) {
            enteredValue = Double.parseDouble(val);
        } else {
            String startingVal=new InputValidator().editWindowNumericValueValidator(val);
            if(!(startingVal.equals("")) && startingVal.trim().length() != 0)
            enteredValue = Double.parseDouble(startingVal);
            else
                enteredValue =new Double(0);
        }
        enteredValue += 100;
        manualEntryTxtBox.setText(enteredValue.toString());
    }//GEN-LAST:event_plus100ActionPerformed

    private void plus10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plus10ActionPerformed
        // TODO add your handling code here:
        String val = manualEntryTxtBox.getText();
        Double enteredValue;
         if (!(val.equals("")) && val.trim().length() != 0 && val.matches("^\\d+\\.*\\d*$")) {
            enteredValue = Double.parseDouble(val);
        } else {
            String startingVal=new InputValidator().editWindowNumericValueValidator(val);
            if(!(startingVal.equals("")) && startingVal.trim().length() != 0)
            enteredValue = Double.parseDouble(startingVal);
            else
                enteredValue =new Double(0);
        }
        enteredValue += 10;
        manualEntryTxtBox.setText(enteredValue.toString());
    }//GEN-LAST:event_plus10ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      if(valuesCombo.getSelectedItem().toString().equals("NO SELECTABLE VALUES")){
          if(!AddPropertyPressed && (manualEntryTxtBox.getText().equals("") || manualEntryTxtBox.getText().trim().length()==0)){
              JOptionPane.showMessageDialog(this, "If there are no selectable values, type in a value in Numeric & Manual Entry Text Box");
          }else{
              String units="";
              if(pxChkBox.isSelected()){ 
                  units="px";
                  pxChkBox.setSelected(false);
              }
              else if(emChkBox.isSelected()){
                  units="em";
                  emChkBox.setSelected(false);
              }
              else if(percentChkbox.isSelected()){
                  units="%";
                  percentChkbox.setSelected(false);
              }
              if(AddPropertyPressed && (manualEntryTxtBox.getText().equals("") || manualEntryTxtBox.getText().trim().length()==0))
                  ;
          
              else{
              if(valueList.getText().length()>0)           
              valueList.setText(valueList.getText()+" "+manualEntryTxtBox.getText().trim()+units+" ");
              else
               valueList.setText(valueList.getText()+manualEntryTxtBox.getText().trim()+units+" ");  
              }
          }
          }else{
          if(valueList.getText().length()>0) 
          valueList.setText(valueList.getText()+" "+valuesCombo.getSelectedItem().toString().trim()+" ");
          else
             valueList.setText(valueList.getText()+valuesCombo.getSelectedItem().toString().trim()+" ");  
      }
      manualEntryTxtBox.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void categoriesComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categoriesComboItemStateChanged
//       System.out.println("categoriesComboItemStateChanged triggered");
        if (categoriesCombo.getSelectedItem() != null) {
            String key = (String) categoriesCombo.getSelectedItem();
            ArrayList propertyList = PropertyLoader.getPropertyList(key);
            propertiesCombo.removeAllItems();
            int length = propertyList.size();
            for (int i = 0; i < length; i++) {
                propertiesCombo.addItem(propertyList.get(i).toString().trim());
               // System.out.println("item: " + propertyList.get(i).toString().trim());
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_categoriesComboItemStateChanged

    private void valuesComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_valuesComboItemStateChanged
    }//GEN-LAST:event_valuesComboItemStateChanged

    private void propertiesComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_propertiesComboItemStateChanged
//        System.out.println("propertiesComboItemStateChanged triggered");
        if (propertiesCombo.getSelectedItem() != null) {
            String key = (String) propertiesCombo.getSelectedItem();
            ArrayList propertyList = new ArrayList();
            try {
                propertyList = PropertyLoader.loadPropVals(key);
            } catch (IOException ex) {
                System.out.println("ERROR: Encountered error while loading property value list. Program terminated!");
                Logger.getLogger(EditWindow.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(1);
            }
            valuesCombo.removeAllItems();
            int length = propertyList.size();
            if (length != 0) {
                if (propertyList.get(0).toString().equals("XXX")) {
                    valuesCombo.addItem("NO SELECTABLE VALUES");
                    return;
                } else {
                    for (int i = 0; i < length; i++) {
                        valuesCombo.addItem(propertyList.get(i).toString().trim());
                       // System.out.println("value: " + propertyList.get(i).toString().trim());
                    }
                }
            }
        }
    }//GEN-LAST:event_propertiesComboItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    Color color = colorChooser.showDialog(colorChooser, "PICK COLOR", colorChooser.getColor());
     if (color != null) 
                        setValueList("#" + Integer.toHexString(color.getRGB() & 0xffffff)+" "); 
    /* Code courtesy: 
     * Website: stackoverflow.com
     * thread:http://stackoverflow.com/questions/8557762/get-color-name-of-selected-color-in-jcolorchooser
     * user: Ayesha
     */
    }//GEN-LAST:event_jButton2ActionPerformed

    private void pxChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pxChkBoxActionPerformed
       if(emChkBox.isSelected())emChkBox.setSelected(false);
       if(percentChkbox.isSelected())percentChkbox.setSelected(false);
    }//GEN-LAST:event_pxChkBoxActionPerformed

    private void emChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emChkBoxActionPerformed
        if(pxChkBox.isSelected())pxChkBox.setSelected(false);
       if(percentChkbox.isSelected())percentChkbox.setSelected(false);        // TODO add your handling code here:
    }//GEN-LAST:event_emChkBoxActionPerformed

    private void percentChkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentChkboxActionPerformed
     if(emChkBox.isSelected())emChkBox.setSelected(false);
       if(pxChkBox.isSelected())pxChkBox.setSelected(false);        // TODO add your handling code here:
    }//GEN-LAST:event_percentChkboxActionPerformed

    private void plus2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plus2ActionPerformed
          manualEntryTxtBox.setText(""); 
           valuesCombo.removeAllItems();
          valuesCombo.addItem("NO SELECTABLE VALUES");
    }//GEN-LAST:event_plus2ActionPerformed

    private void valuesComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valuesComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valuesComboActionPerformed

    private void propertiesComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertiesComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_propertiesComboActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       AddPropertyPressed=true;
        jButton1ActionPerformed(evt);
        AddPropertyPressed=false;
        
        System.out.println(valuesCombo.getSelectedItem().toString().equals("NO SELECTABLE VALUES"));
        System.out.println(manualEntryTxtBox.getText().equals("") 
                || manualEntryTxtBox.getText().trim().length()==0);
        System.out.println(valueList.getText().equals("") || valueList.getText().trim().length()==0);
        
        if(valuesCombo.getSelectedItem().toString().equals("NO SELECTABLE VALUES") 
                && (manualEntryTxtBox.getText().equals("") 
                || manualEntryTxtBox.getText().trim().length()==0)
                && (valueList.getText().equals("") || valueList.getText().trim().length()==0)
                
                ){
        
    JOptionPane.showMessageDialog(this, "If there are no selectable values, type in a value in Numeric & Manual Entry Text Box");
          }else{
        rule.addProperty(propertiesCombo.getSelectedItem().toString(), valueList.getText().trim());
       stylesAddedTxtArea.append(propertiesCombo.getSelectedItem().toString()+": "+ valueList.getText().trim()+"\n");
       valueList.setText("");
      
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void categoriesComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriesComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoriesComboActionPerformed

    private void clearStyleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearStyleBtnActionPerformed
        rule=new StyleRule(rule.getRuleTitle());
        stylesAddedTxtArea.setText("");
    }//GEN-LAST:event_clearStyleBtnActionPerformed

    public static StyleRule getRule() {
        return rule;
    }

    public void loadCategoriesCombo() {
        ArrayList categories = properties.getCategories();
        Collections.sort(categories);
        categoriesCombo.removeAllItems();
        int length = categories.size();
        for (int i = 0; i < length; i++) {
            categoriesCombo.addItem(categories.get(i));
        }
    }

    public static void setValueList(String valueList) {
        EditWindow.valueList.setText(EditWindow.valueList.getText()+" "+valueList);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        if (args.length > 0) {
            rule = new StyleRule(args[0]);
        }
        System.out.println(rule.getRuleTitle());
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditWindow().setVisible(true);
            }
        });
    }
    private static StyleRule rule;
    private static PropertyLoader properties;
    private JColorChooser colorChooser;
    private boolean AddPropertyPressed=false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox categoriesCombo;
    private javax.swing.JButton clearStyleBtn;
    private javax.swing.JCheckBox emChkBox;
    private javax.swing.JSlider fineTuneSlider;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField manualEntryTxtBox;
    private javax.swing.JCheckBox percentChkbox;
    private javax.swing.JButton plus1;
    private javax.swing.JButton plus10;
    private javax.swing.JButton plus100;
    private javax.swing.JButton plus2;
    private javax.swing.JComboBox propertiesCombo;
    private javax.swing.JCheckBox pxChkBox;
    private javax.swing.JTextArea stylesAddedTxtArea;
    private static javax.swing.JTextField valueList;
    private javax.swing.JComboBox valuesCombo;
    // End of variables declaration//GEN-END:variables
}
